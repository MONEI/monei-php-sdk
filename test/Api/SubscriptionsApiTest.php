<?php

/**
 * SubscriptionsApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  Monei\
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MONEI API v1
 *
 * <p>The MONEI API is organized around <a href=\"https://en.wikipedia.org/wiki/Representational_State_Transfer\">REST</a> principles. Our API is designed to be intuitive and developer-friendly.</p> <h3>Base URL</h3> <p>All API requests should be made to:</p> <pre><code>https://api.monei.com/v1 </code></pre> <h3>Environment</h3> <p>MONEI provides two environments:</p> <ul> <li><strong>Test Environment</strong>: For development and testing without processing real payments</li> <li><strong>Live Environment</strong>: For processing real transactions in production</li> </ul> <h3>Client Libraries</h3> <p>We provide official SDKs to simplify integration:</p> <ul> <li><a href=\"https://github.com/MONEI/monei-php-sdk\">PHP SDK</a></li> <li><a href=\"https://github.com/MONEI/monei-python-sdk\">Python SDK</a></li> <li><a href=\"https://github.com/MONEI/monei-node-sdk\">Node.js SDK</a></li> <li><a href=\"https://postman.monei.com/\">Postman Collection</a></li> </ul> <p>Our SDKs handle authentication, error handling, and request formatting automatically.</p> <h3>Important Requirements</h3> <ul> <li>All API requests must be made over HTTPS</li> <li>If you are not using our official SDKs, you <strong>must provide a valid <code>User-Agent</code> header</strong> with each request</li> <li>Requests without proper authentication will return a <code>401 Unauthorized</code> error</li> </ul> <h3>Error Handling</h3> <p>The API returns consistent error codes and messages to help you troubleshoot issues. Each response includes a <code>statusCode</code> attribute indicating the outcome of your request.</p> <p><a href=\"https://docs.monei.com/api/errors\">View complete list of status codes â†’</a></p> <h3>Rate Limits</h3> <p>The API implements rate limiting to ensure stability. If you exceed the limits, requests will return a <code>429 Too Many Requests</code> status code.</p>
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Monei\Test\Api;

use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Handler\MockHandler;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Psr7\Response;
use GuzzleHttp\Client;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Middleware;
use Monei\Api\SubscriptionsApi;
use Monei\ApiException;
use Monei\Configuration;
use Monei\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * SubscriptionsApiTest Class Doc Comment
 *
 * @category Class
 * @package  Monei\
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SubscriptionsApiTest extends TestCase
{
    /**
     * @var SubscriptionsApi
     */
    protected $subscriptionsApi;

    /**
     * @var MockHandler
     */
    protected $mockHandler;

    /**
     * @var array
     */
    protected $container = [];

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void {}

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        // Create a mock handler
        $this->mockHandler = new MockHandler();

        // Create a handler stack with the mock handler
        $handlerStack = HandlerStack::create($this->mockHandler);

        // Add history middleware to the handler stack
        $history = Middleware::history($this->container);
        $handlerStack->push($history);

        // Create a Guzzle client with the handler stack
        $client = new Client(['handler' => $handlerStack]);

        // Create a configuration with a dummy API key
        $config = Configuration::getDefaultConfiguration();
        $config->setApiKey('Authorization', 'test_api_key');

        // Create the API instance with the mock client
        $this->subscriptionsApi = new SubscriptionsApi($client, $config);
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
        $this->mockHandler->reset();
        $this->container = [];
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void {}

    /**
     * Test case for activate
     *
     * Activate Subscription.
     */
    public function testActivate()
    {
        $subscriptionId = 'sub_123456789';
        $paymentId = 'pay_987654321';  // Payment ID, not subscription ID

        // Queue a mock response - this should be a Payment object
        $this->mockHandler->append(new Response(
            200,
            ['Content-Type' => 'application/json'],
            json_encode([
                'id' => $paymentId,
                'amount' => 1000,
                'currency' => 'EUR',
                'status' => 'SUCCEEDED',
                'orderId' => 'order_123',
                'description' => 'Subscription activation payment',
                'livemode' => false,
                'createdAt' => 1640995200,
                'updatedAt' => 1640995200
            ])
        ));

        // Call the API method
        $result = $this->subscriptionsApi->activate($subscriptionId);

        // Check the request
        $this->assertCount(1, $this->container);
        $request = $this->container[0]['request'];
        $this->assertEquals('POST', $request->getMethod());
        $this->assertStringContainsString("/subscriptions/{$subscriptionId}/activate", $request->getUri()->getPath());

        // Check the response - this should be a Payment object
        $this->assertEquals($paymentId, $result['id']);
        $this->assertEquals('SUCCEEDED', $result['status']);
        $this->assertEquals(1000, $result['amount']);
        $this->assertEquals('EUR', $result['currency']);
        $this->assertEquals('order_123', $result['order_id']);
        $this->assertEquals('Subscription activation payment', $result['description']);
        $this->assertEquals(false, $result['livemode']);
        $this->assertEquals(1640995200, $result['created_at']);
        $this->assertEquals(1640995200, $result['updated_at']);
    }

    /**
     * Test case for cancel
     *
     * Cancel Subscription.
     */
    public function testCancel()
    {
        $subscriptionId = 'sub_123456789';

        // Queue a mock response
        $this->mockHandler->append(new Response(
            200,
            ['Content-Type' => 'application/json'],
            json_encode([
                'id' => $subscriptionId,
                'status' => 'CANCELED',
                'amount' => 1000,
                'currency' => 'EUR',
                'interval' => 'month'
            ])
        ));

        // Call the API method
        $result = $this->subscriptionsApi->cancel($subscriptionId);

        // Check the request
        $this->assertCount(1, $this->container);
        $request = $this->container[0]['request'];
        $this->assertEquals('POST', $request->getMethod());
        $this->assertStringContainsString("/subscriptions/{$subscriptionId}/cancel", $request->getUri()->getPath());

        // Check the response
        $this->assertEquals($subscriptionId, $result['id']);
        $this->assertEquals('CANCELED', $result['status']);
        $this->assertEquals(1000, $result['amount']);
        $this->assertEquals('EUR', $result['currency']);
        $this->assertEquals('month', $result['interval']);
    }

    /**
     * Test case for create
     *
     * Create Subscription.
     */
    public function testCreate()
    {
        $subscriptionId = 'sub_123456789';

        // Queue a mock response
        $this->mockHandler->append(new Response(
            200,
            ['Content-Type' => 'application/json'],
            json_encode([
                'id' => $subscriptionId,
                'status' => 'ACTIVE',
                'amount' => 1000,
                'currency' => 'EUR',
                'interval' => 'month',
                'paymentMethodId' => 'pm_123456789',
                'customerId' => 'cus_123456789'
            ])
        ));

        // Create a subscription request
        $createRequest = (object) [
            'amount' => 1000,
            'currency' => 'EUR',
            'interval' => 'month',
            'paymentMethodId' => 'pm_123456789',
            'customerId' => 'cus_123456789'
        ];

        // Call the API method - we don't care about the response for this test
        $this->subscriptionsApi->create($createRequest);

        // Check the request
        $this->assertCount(1, $this->container);
        $request = $this->container[0]['request'];
        $this->assertEquals('POST', $request->getMethod());
        $this->assertStringContainsString('/subscriptions', $request->getUri()->getPath());

        // Check the request body
        $requestBody = json_decode($request->getBody()->getContents(), true);
        $this->assertEquals(1000, $requestBody['amount']);
        $this->assertEquals('EUR', $requestBody['currency']);
        $this->assertEquals('month', $requestBody['interval']);
        $this->assertEquals('pm_123456789', $requestBody['paymentMethodId']);
        $this->assertEquals('cus_123456789', $requestBody['customerId']);
    }

    /**
     * Test case for get
     *
     * Get Subscription.
     */
    public function testGet()
    {
        $subscriptionId = 'sub_123456789';

        // Queue a mock response
        $this->mockHandler->append(new Response(
            200,
            ['Content-Type' => 'application/json'],
            json_encode([
                'id' => $subscriptionId,
                'status' => 'ACTIVE',
                'amount' => 1000,
                'currency' => 'EUR',
                'interval' => 'month',
                'paymentMethodId' => 'pm_123456789',
                'customerId' => 'cus_123456789'
            ])
        ));

        // Call the API method - we don't care about the response for this test
        $this->subscriptionsApi->get($subscriptionId);

        // Check the request
        $this->assertCount(1, $this->container);
        $request = $this->container[0]['request'];
        $this->assertEquals('GET', $request->getMethod());
        $this->assertStringContainsString("subscriptions/{$subscriptionId}", $request->getUri()->getPath());
    }

    /**
     * Test case for pause
     *
     * Pause Subscription.
     */
    public function testPause()
    {
        $subscriptionId = 'sub_123456789';

        // Queue a mock response
        $this->mockHandler->append(new Response(
            200,
            ['Content-Type' => 'application/json'],
            json_encode([
                'id' => $subscriptionId,
                'status' => 'PAUSED',
                'amount' => 1000,
                'currency' => 'EUR',
                'interval' => 'month'
            ])
        ));

        // Call the API method
        $result = $this->subscriptionsApi->pause($subscriptionId);

        // Check the request
        $this->assertCount(1, $this->container);
        $request = $this->container[0]['request'];
        $this->assertEquals('POST', $request->getMethod());
        $this->assertStringContainsString("/subscriptions/{$subscriptionId}/pause", $request->getUri()->getPath());

        // Check the response
        $this->assertEquals($subscriptionId, $result['id']);
        $this->assertEquals('PAUSED', $result['status']);
        $this->assertEquals(1000, $result['amount']);
        $this->assertEquals('EUR', $result['currency']);
        $this->assertEquals('month', $result['interval']);
    }

    /**
     * Test case for resume
     *
     * Resume Subscription.
     */
    public function testResume()
    {
        $subscriptionId = 'sub_123456789';

        // Queue a mock response
        $this->mockHandler->append(new Response(
            200,
            ['Content-Type' => 'application/json'],
            json_encode([
                'id' => $subscriptionId,
                'status' => 'ACTIVE',
                'amount' => 1000,
                'currency' => 'EUR',
                'interval' => 'month'
            ])
        ));

        // Call the API method
        $result = $this->subscriptionsApi->resume($subscriptionId);

        // Check the request
        $this->assertCount(1, $this->container);
        $request = $this->container[0]['request'];
        $this->assertEquals('POST', $request->getMethod());
        $this->assertStringContainsString("/subscriptions/{$subscriptionId}/resume", $request->getUri()->getPath());

        // Check the response
        $this->assertEquals($subscriptionId, $result['id']);
        $this->assertEquals('ACTIVE', $result['status']);
        $this->assertEquals(1000, $result['amount']);
        $this->assertEquals('EUR', $result['currency']);
        $this->assertEquals('month', $result['interval']);
    }

    /**
     * Test case for sendLink
     *
     * Send Subscription Link.
     */
    public function testSendLink()
    {
        $subscriptionId = 'sub_123456789';

        // Queue a mock response
        $this->mockHandler->append(new Response(
            200,
            ['Content-Type' => 'application/json'],
            json_encode([
                'id' => $subscriptionId,
                'status' => 'ACTIVE',
                'amount' => 1000,
                'currency' => 'EUR',
                'interval' => 'month'
            ])
        ));

        // Create a send link request
        $sendLinkRequest = (object) ['email' => 'customer@example.com'];

        // Call the API method
        $result = $this->subscriptionsApi->sendLink($subscriptionId, $sendLinkRequest);

        // Check the request
        $this->assertCount(1, $this->container);
        $request = $this->container[0]['request'];
        $this->assertEquals('POST', $request->getMethod());
        $this->assertStringContainsString("/subscriptions/{$subscriptionId}/link", $request->getUri()->getPath());

        // Check the response
        $this->assertEquals($subscriptionId, $result['id']);
        $this->assertEquals('ACTIVE', $result['status']);
        $this->assertEquals(1000, $result['amount']);
        $this->assertEquals('EUR', $result['currency']);
        $this->assertEquals('month', $result['interval']);
    }

    /**
     * Test case for sendStatus
     *
     * Send Subscription Status.
     */
    public function testSendStatus()
    {
        $subscriptionId = 'sub_123456789';

        // Queue a mock response
        $this->mockHandler->append(new Response(
            200,
            ['Content-Type' => 'application/json'],
            json_encode([
                'id' => $subscriptionId,
                'status' => 'ACTIVE',
                'amount' => 1000,
                'currency' => 'EUR',
                'interval' => 'month'
            ])
        ));

        // Create a send status request
        $sendStatusRequest = (object) ['email' => 'customer@example.com'];

        // Call the API method
        $result = $this->subscriptionsApi->sendStatus($subscriptionId, $sendStatusRequest);

        // Check the request
        $this->assertCount(1, $this->container);
        $request = $this->container[0]['request'];
        $this->assertEquals('POST', $request->getMethod());
        $this->assertStringContainsString("/subscriptions/{$subscriptionId}/status", $request->getUri()->getPath());

        // Check the response
        $this->assertEquals($subscriptionId, $result['id']);
        $this->assertEquals('ACTIVE', $result['status']);
        $this->assertEquals(1000, $result['amount']);
        $this->assertEquals('EUR', $result['currency']);
        $this->assertEquals('month', $result['interval']);
    }

    /**
     * Test case for update
     *
     * Update Subscription.
     */
    public function testUpdate()
    {
        $subscriptionId = 'sub_123456789';

        // Queue a mock response
        $this->mockHandler->append(new Response(
            200,
            ['Content-Type' => 'application/json'],
            json_encode([
                'id' => $subscriptionId,
                'status' => 'ACTIVE',
                'amount' => 2000,
                'currency' => 'EUR',
                'interval' => 'month',
                'metadata' => ['plan' => 'premium'],
                'paymentMethodId' => 'pm_123456789',
                'customerId' => 'cus_123456789'
            ])
        ));

        // Create an update request
        $updateRequest = (object) [
            'amount' => 2000,
            'metadata' => ['plan' => 'premium']
        ];

        // Call the API method - we don't care about the response for this test
        $this->subscriptionsApi->update($subscriptionId, $updateRequest);

        // Check the request
        $this->assertCount(1, $this->container);
        $request = $this->container[0]['request'];
        $this->assertEquals('PUT', $request->getMethod());
        $this->assertStringContainsString("subscriptions/{$subscriptionId}", $request->getUri()->getPath());

        // Check the request body
        $requestBody = json_decode($request->getBody()->getContents(), true);
        $this->assertEquals(2000, $requestBody['amount']);
        $this->assertEquals(['plan' => 'premium'], $requestBody['metadata']);
    }
}
