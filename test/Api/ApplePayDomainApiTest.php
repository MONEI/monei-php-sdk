<?php

/**
 * ApplePayDomainApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  Monei\
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MONEI API v1
 *
 * <p>The MONEI API is organized around <a href=\"https://en.wikipedia.org/wiki/Representational_State_Transfer\">REST</a> principles. Our API is designed to be intuitive and developer-friendly.</p> <h3>Base URL</h3> <p>All API requests should be made to:</p> <pre><code>https://api.monei.com/v1 </code></pre> <h3>Environment</h3> <p>MONEI provides two environments:</p> <ul> <li><strong>Test Environment</strong>: For development and testing without processing real payments</li> <li><strong>Live Environment</strong>: For processing real transactions in production</li> </ul> <h3>Client Libraries</h3> <p>We provide official SDKs to simplify integration:</p> <ul> <li><a href=\"https://github.com/MONEI/monei-php-sdk\">PHP SDK</a></li> <li><a href=\"https://github.com/MONEI/monei-python-sdk\">Python SDK</a></li> <li><a href=\"https://github.com/MONEI/monei-node-sdk\">Node.js SDK</a></li> <li><a href=\"https://postman.monei.com/\">Postman Collection</a></li> </ul> <p>Our SDKs handle authentication, error handling, and request formatting automatically.</p> <h3>Important Requirements</h3> <ul> <li>All API requests must be made over HTTPS</li> <li>If you are not using our official SDKs, you <strong>must provide a valid <code>User-Agent</code> header</strong> with each request</li> <li>Requests without proper authentication will return a <code>401 Unauthorized</code> error</li> </ul> <h3>Error Handling</h3> <p>The API returns consistent error codes and messages to help you troubleshoot issues. Each response includes a <code>statusCode</code> attribute indicating the outcome of your request.</p> <p><a href=\"https://docs.monei.com/api/errors\">View complete list of status codes â†’</a></p> <h3>Rate Limits</h3> <p>The API implements rate limiting to ensure stability. If you exceed the limits, requests will return a <code>429 Too Many Requests</code> status code.</p>
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Monei\Test\Api;

use Monei\Configuration;
use Monei\ApiException;
use Monei\ObjectSerializer;
use Monei\Api\ApplePayDomainApi;
use Monei\Internal\GuzzleHttp\Client;
use Monei\Internal\GuzzleHttp\Handler\MockHandler;
use Monei\Internal\GuzzleHttp\HandlerStack;
use Monei\Internal\GuzzleHttp\Psr7\Response;
use Monei\Internal\GuzzleHttp\Psr7\Request;
use Monei\Internal\GuzzleHttp\Exception\RequestException;
use Monei\Internal\GuzzleHttp\Middleware;
use PHPUnit\Framework\TestCase;

/**
 * ApplePayDomainApiTest Class Doc Comment
 *
 * @category Class
 * @package  Monei\
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ApplePayDomainApiTest extends TestCase
{
    /**
     * @var ApplePayDomainApi
     */
    protected $applePayDomainApi;

    /**
     * @var MockHandler
     */
    protected $mockHandler;

    /**
     * @var array
     */
    protected $container = [];

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        // Create a mock handler
        $this->mockHandler = new MockHandler();

        // Create a handler stack with the mock handler
        $handlerStack = HandlerStack::create($this->mockHandler);

        // Add history middleware to the handler stack
        $history = Middleware::history($this->container);
        $handlerStack->push($history);

        // Create a Guzzle client with the handler stack
        $client = new Client(['handler' => $handlerStack]);

        // Create a configuration with a dummy API key
        $config = Configuration::getDefaultConfiguration();
        $config->setApiKey('Authorization', 'test_api_key');

        // Create the API instance with the mock client
        $this->applePayDomainApi = new ApplePayDomainApi($client, $config);
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
        $this->mockHandler->reset();
        $this->container = [];
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for register
     *
     * Register Apple Pay Domain.
     */
    public function testRegister()
    {
        $domain = 'example.com';

        // Queue a mock response
        $this->mockHandler->append(new Response(
            200,
            ['Content-Type' => 'application/json'],
            json_encode([
                'id' => 'dom_123456789',
                'domain' => $domain,
                'status' => 'ACTIVE'
            ])
        ));

        // Create a register domain request
        $registerRequest = (object)['domain' => $domain];

        // Call the API method - we don't care about the response for this test
        $this->applePayDomainApi->register($registerRequest);

        // Check the request
        $this->assertCount(1, $this->container);
        $request = $this->container[0]['request'];
        $this->assertEquals('POST', $request->getMethod());
        $this->assertStringContainsString("/apple-pay/domains", $request->getUri()->getPath());

        // Check the request body
        $requestBody = json_decode($request->getBody()->getContents(), true);
        $this->assertEquals($domain, $requestBody['domain']);
    }
}
