<?php

/**
 * Subscription
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Monei
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MONEI API v1
 *
 * The MONEI API is organized around REST principles. Our API is designed to be intuitive and developer-friendly.  ### Base URL  All API requests should be made to:  ``` https://api.monei.com/v1 ```  ### Environment  MONEI provides two environments:  - **Test Environment**: For development and testing without processing real payments - **Live Environment**: For processing real transactions in production  ### Client Libraries  We provide official SDKs to simplify integration:  - [PHP SDK](https://github.com/MONEI/monei-php-sdk) - [Python SDK](https://github.com/MONEI/monei-python-sdk) - [Node.js SDK](https://github.com/MONEI/monei-node-sdk) - [Postman Collection](https://postman.monei.com/)  Our SDKs handle authentication, error handling, and request formatting automatically.  You can download the OpenAPI specification from the https://js.monei.com/api/v1/openapi.json and generate your own client library using the [OpenAPI Generator](https://openapi-generator.tech/).  ### Important Requirements  - All API requests must be made over HTTPS - If you are not using our official SDKs, you **must provide a valid `User-Agent` header** with each request - Requests without proper authentication will return a `401 Unauthorized` error  ### Error Handling  The API returns consistent error codes and messages to help you troubleshoot issues. Each response includes a `statusCode` attribute indicating the outcome of your request.  ### Rate Limits  The API implements rate limiting to ensure stability. If you exceed the limits, requests will return a `429 Too Many Requests` status code.
 *
 * The version of the OpenAPI document: 1.6.4
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Monei\Model;

use \ArrayAccess;
use \Monei\ObjectSerializer;

/**
 * Subscription Class Doc Comment
 *
 * @category Class
 * @package  Monei
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Subscription implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Subscription';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'amount' => 'int',
        'currency' => 'string',
        'description' => 'string',
        'account_id' => 'string',
        'livemode' => 'bool',
        'status' => '\Monei\Model\SubscriptionStatus',
        'customer' => '\Monei\Model\PaymentCustomer',
        'billing_details' => '\Monei\Model\PaymentBillingDetails',
        'shipping_details' => '\Monei\Model\PaymentShippingDetails',
        'interval' => '\Monei\Model\SubscriptionInterval',
        'interval_count' => 'int',
        'pause_interval_count' => 'int',
        'last_order_id' => 'string',
        'last_payment' => '\Monei\Model\SubscriptionLastPayment',
        'payment_method' => '\Monei\Model\SubscriptionPaymentMethod',
        'current_period_start' => 'float',
        'current_period_end' => 'float',
        'trial_period_end' => 'float',
        'next_payment_at' => 'int',
        'retry_count' => 'int',
        'retry_schedule' => '\Monei\Model\SubscriptionRetryScheduleInner[]',
        'cancel_at_period_end' => 'bool',
        'pause_at_period_end' => 'bool',
        'trace_details' => '\Monei\Model\PaymentTraceDetails',
        'sequence_id' => 'string',
        'callback_url' => 'string',
        'payment_callback_url' => 'string',
        'metadata' => 'object',
        'created_at' => 'int',
        'updated_at' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'amount' => 'int32',
        'currency' => null,
        'description' => null,
        'account_id' => null,
        'livemode' => null,
        'status' => null,
        'customer' => null,
        'billing_details' => null,
        'shipping_details' => null,
        'interval' => null,
        'interval_count' => 'int32',
        'pause_interval_count' => 'int32',
        'last_order_id' => null,
        'last_payment' => null,
        'payment_method' => null,
        'current_period_start' => 'int64',
        'current_period_end' => 'int64',
        'trial_period_end' => 'int64',
        'next_payment_at' => 'int64',
        'retry_count' => 'int32',
        'retry_schedule' => null,
        'cancel_at_period_end' => null,
        'pause_at_period_end' => null,
        'trace_details' => null,
        'sequence_id' => null,
        'callback_url' => null,
        'payment_callback_url' => null,
        'metadata' => null,
        'created_at' => 'int64',
        'updated_at' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'amount' => 'amount',
        'currency' => 'currency',
        'description' => 'description',
        'account_id' => 'accountId',
        'livemode' => 'livemode',
        'status' => 'status',
        'customer' => 'customer',
        'billing_details' => 'billingDetails',
        'shipping_details' => 'shippingDetails',
        'interval' => 'interval',
        'interval_count' => 'intervalCount',
        'pause_interval_count' => 'pauseIntervalCount',
        'last_order_id' => 'lastOrderId',
        'last_payment' => 'lastPayment',
        'payment_method' => 'paymentMethod',
        'current_period_start' => 'currentPeriodStart',
        'current_period_end' => 'currentPeriodEnd',
        'trial_period_end' => 'trialPeriodEnd',
        'next_payment_at' => 'nextPaymentAt',
        'retry_count' => 'retryCount',
        'retry_schedule' => 'retrySchedule',
        'cancel_at_period_end' => 'cancelAtPeriodEnd',
        'pause_at_period_end' => 'pauseAtPeriodEnd',
        'trace_details' => 'traceDetails',
        'sequence_id' => 'sequenceId',
        'callback_url' => 'callbackUrl',
        'payment_callback_url' => 'paymentCallbackUrl',
        'metadata' => 'metadata',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'amount' => 'setAmount',
        'currency' => 'setCurrency',
        'description' => 'setDescription',
        'account_id' => 'setAccountId',
        'livemode' => 'setLivemode',
        'status' => 'setStatus',
        'customer' => 'setCustomer',
        'billing_details' => 'setBillingDetails',
        'shipping_details' => 'setShippingDetails',
        'interval' => 'setInterval',
        'interval_count' => 'setIntervalCount',
        'pause_interval_count' => 'setPauseIntervalCount',
        'last_order_id' => 'setLastOrderId',
        'last_payment' => 'setLastPayment',
        'payment_method' => 'setPaymentMethod',
        'current_period_start' => 'setCurrentPeriodStart',
        'current_period_end' => 'setCurrentPeriodEnd',
        'trial_period_end' => 'setTrialPeriodEnd',
        'next_payment_at' => 'setNextPaymentAt',
        'retry_count' => 'setRetryCount',
        'retry_schedule' => 'setRetrySchedule',
        'cancel_at_period_end' => 'setCancelAtPeriodEnd',
        'pause_at_period_end' => 'setPauseAtPeriodEnd',
        'trace_details' => 'setTraceDetails',
        'sequence_id' => 'setSequenceId',
        'callback_url' => 'setCallbackUrl',
        'payment_callback_url' => 'setPaymentCallbackUrl',
        'metadata' => 'setMetadata',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'amount' => 'getAmount',
        'currency' => 'getCurrency',
        'description' => 'getDescription',
        'account_id' => 'getAccountId',
        'livemode' => 'getLivemode',
        'status' => 'getStatus',
        'customer' => 'getCustomer',
        'billing_details' => 'getBillingDetails',
        'shipping_details' => 'getShippingDetails',
        'interval' => 'getInterval',
        'interval_count' => 'getIntervalCount',
        'pause_interval_count' => 'getPauseIntervalCount',
        'last_order_id' => 'getLastOrderId',
        'last_payment' => 'getLastPayment',
        'payment_method' => 'getPaymentMethod',
        'current_period_start' => 'getCurrentPeriodStart',
        'current_period_end' => 'getCurrentPeriodEnd',
        'trial_period_end' => 'getTrialPeriodEnd',
        'next_payment_at' => 'getNextPaymentAt',
        'retry_count' => 'getRetryCount',
        'retry_schedule' => 'getRetrySchedule',
        'cancel_at_period_end' => 'getCancelAtPeriodEnd',
        'pause_at_period_end' => 'getPauseAtPeriodEnd',
        'trace_details' => 'getTraceDetails',
        'sequence_id' => 'getSequenceId',
        'callback_url' => 'getCallbackUrl',
        'payment_callback_url' => 'getPaymentCallbackUrl',
        'metadata' => 'getMetadata',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['currency'] = $data['currency'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['account_id'] = $data['account_id'] ?? null;
        $this->container['livemode'] = $data['livemode'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['customer'] = $data['customer'] ?? null;
        $this->container['billing_details'] = $data['billing_details'] ?? null;
        $this->container['shipping_details'] = $data['shipping_details'] ?? null;
        $this->container['interval'] = $data['interval'] ?? null;
        $this->container['interval_count'] = $data['interval_count'] ?? null;
        $this->container['pause_interval_count'] = $data['pause_interval_count'] ?? null;
        $this->container['last_order_id'] = $data['last_order_id'] ?? null;
        $this->container['last_payment'] = $data['last_payment'] ?? null;
        $this->container['payment_method'] = $data['payment_method'] ?? null;
        $this->container['current_period_start'] = $data['current_period_start'] ?? null;
        $this->container['current_period_end'] = $data['current_period_end'] ?? null;
        $this->container['trial_period_end'] = $data['trial_period_end'] ?? null;
        $this->container['next_payment_at'] = $data['next_payment_at'] ?? null;
        $this->container['retry_count'] = $data['retry_count'] ?? null;
        $this->container['retry_schedule'] = $data['retry_schedule'] ?? null;
        $this->container['cancel_at_period_end'] = $data['cancel_at_period_end'] ?? null;
        $this->container['pause_at_period_end'] = $data['pause_at_period_end'] ?? null;
        $this->container['trace_details'] = $data['trace_details'] ?? null;
        $this->container['sequence_id'] = $data['sequence_id'] ?? null;
        $this->container['callback_url'] = $data['callback_url'] ?? null;
        $this->container['payment_callback_url'] = $data['payment_callback_url'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['account_id'] === null) {
            $invalidProperties[] = "'account_id' can't be null";
        }
        if ($this->container['livemode'] === null) {
            $invalidProperties[] = "'livemode' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['interval'] === null) {
            $invalidProperties[] = "'interval' can't be null";
        }
        if ($this->container['interval_count'] === null) {
            $invalidProperties[] = "'interval_count' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique identifier for the subscription.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount Amount intended to be collected by this payment. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge 1.00 USD).
     *
     * @return self
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Three-letter [ISO currency code](https://en.wikipedia.org/wiki/ISO_4217), in uppercase. Must be a supported currency.
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description An arbitrary string attached to the subscription. Often useful for displaying to users.
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id MONEI Account identifier.
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets livemode
     *
     * @return bool
     */
    public function getLivemode()
    {
        return $this->container['livemode'];
    }

    /**
     * Sets livemode
     *
     * @param bool $livemode Has the value `true` if the resource exists in live mode or the value `false` if the resource exists in test mode.
     *
     * @return self
     */
    public function setLivemode($livemode)
    {
        $this->container['livemode'] = $livemode;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Monei\Model\SubscriptionStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Monei\Model\SubscriptionStatus $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \Monei\Model\PaymentCustomer|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \Monei\Model\PaymentCustomer|null $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets billing_details
     *
     * @return \Monei\Model\PaymentBillingDetails|null
     */
    public function getBillingDetails()
    {
        return $this->container['billing_details'];
    }

    /**
     * Sets billing_details
     *
     * @param \Monei\Model\PaymentBillingDetails|null $billing_details billing_details
     *
     * @return self
     */
    public function setBillingDetails($billing_details)
    {
        $this->container['billing_details'] = $billing_details;

        return $this;
    }

    /**
     * Gets shipping_details
     *
     * @return \Monei\Model\PaymentShippingDetails|null
     */
    public function getShippingDetails()
    {
        return $this->container['shipping_details'];
    }

    /**
     * Sets shipping_details
     *
     * @param \Monei\Model\PaymentShippingDetails|null $shipping_details shipping_details
     *
     * @return self
     */
    public function setShippingDetails($shipping_details)
    {
        $this->container['shipping_details'] = $shipping_details;

        return $this;
    }

    /**
     * Gets interval
     *
     * @return \Monei\Model\SubscriptionInterval
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param \Monei\Model\SubscriptionInterval $interval interval
     *
     * @return self
     */
    public function setInterval($interval)
    {
        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets interval_count
     *
     * @return int
     */
    public function getIntervalCount()
    {
        return $this->container['interval_count'];
    }

    /**
     * Sets interval_count
     *
     * @param int $interval_count Number of intervals between subscription payments.
     *
     * @return self
     */
    public function setIntervalCount($interval_count)
    {
        $this->container['interval_count'] = $interval_count;

        return $this;
    }

    /**
     * Gets pause_interval_count
     *
     * @return int|null
     */
    public function getPauseIntervalCount()
    {
        return $this->container['pause_interval_count'];
    }

    /**
     * Sets pause_interval_count
     *
     * @param int|null $pause_interval_count Number of intervals when subscription will be paused before it activates again.
     *
     * @return self
     */
    public function setPauseIntervalCount($pause_interval_count)
    {
        $this->container['pause_interval_count'] = $pause_interval_count;

        return $this;
    }

    /**
     * Gets last_order_id
     *
     * @return string|null
     */
    public function getLastOrderId()
    {
        return $this->container['last_order_id'];
    }

    /**
     * Sets last_order_id
     *
     * @param string|null $last_order_id An order ID from your system. A unique identifier that can be used to reconcile the payment with your internal system.
     *
     * @return self
     */
    public function setLastOrderId($last_order_id)
    {
        $this->container['last_order_id'] = $last_order_id;

        return $this;
    }

    /**
     * Gets last_payment
     *
     * @return \Monei\Model\SubscriptionLastPayment|null
     */
    public function getLastPayment()
    {
        return $this->container['last_payment'];
    }

    /**
     * Sets last_payment
     *
     * @param \Monei\Model\SubscriptionLastPayment|null $last_payment last_payment
     *
     * @return self
     */
    public function setLastPayment($last_payment)
    {
        $this->container['last_payment'] = $last_payment;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return \Monei\Model\SubscriptionPaymentMethod|null
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param \Monei\Model\SubscriptionPaymentMethod|null $payment_method payment_method
     *
     * @return self
     */
    public function setPaymentMethod($payment_method)
    {
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets current_period_start
     *
     * @return float|null
     */
    public function getCurrentPeriodStart()
    {
        return $this->container['current_period_start'];
    }

    /**
     * Sets current_period_start
     *
     * @param float|null $current_period_start The start date of the current subscription period. Measured in seconds since the Unix epoch.
     *
     * @return self
     */
    public function setCurrentPeriodStart($current_period_start)
    {
        $this->container['current_period_start'] = $current_period_start;

        return $this;
    }

    /**
     * Gets current_period_end
     *
     * @return float|null
     */
    public function getCurrentPeriodEnd()
    {
        return $this->container['current_period_end'];
    }

    /**
     * Sets current_period_end
     *
     * @param float|null $current_period_end The end date of the current subscription period. Measured in seconds since the Unix epoch.
     *
     * @return self
     */
    public function setCurrentPeriodEnd($current_period_end)
    {
        $this->container['current_period_end'] = $current_period_end;

        return $this;
    }

    /**
     * Gets trial_period_end
     *
     * @return float|null
     */
    public function getTrialPeriodEnd()
    {
        return $this->container['trial_period_end'];
    }

    /**
     * Sets trial_period_end
     *
     * @param float|null $trial_period_end The end date of the trial period. Measured in seconds since the Unix epoch.
     *
     * @return self
     */
    public function setTrialPeriodEnd($trial_period_end)
    {
        $this->container['trial_period_end'] = $trial_period_end;

        return $this;
    }

    /**
     * Gets next_payment_at
     *
     * @return int|null
     */
    public function getNextPaymentAt()
    {
        return $this->container['next_payment_at'];
    }

    /**
     * Sets next_payment_at
     *
     * @param int|null $next_payment_at The date when the next payment will be made.
     *
     * @return self
     */
    public function setNextPaymentAt($next_payment_at)
    {
        $this->container['next_payment_at'] = $next_payment_at;

        return $this;
    }

    /**
     * Gets retry_count
     *
     * @return int|null
     */
    public function getRetryCount()
    {
        return $this->container['retry_count'];
    }

    /**
     * Sets retry_count
     *
     * @param int|null $retry_count Number of retries left for the subscription.
     *
     * @return self
     */
    public function setRetryCount($retry_count)
    {
        $this->container['retry_count'] = $retry_count;

        return $this;
    }

    /**
     * Gets retry_schedule
     *
     * @return \Monei\Model\SubscriptionRetryScheduleInner[]|null
     */
    public function getRetrySchedule()
    {
        return $this->container['retry_schedule'];
    }

    /**
     * Sets retry_schedule
     *
     * @param \Monei\Model\SubscriptionRetryScheduleInner[]|null $retry_schedule Defines a custom schedule for retrying failed subscription payments. Each entry in the array specifies how long to wait before attempting the next payment retry. If not specified, the system's default retry schedule will be used.
     *
     * @return self
     */
    public function setRetrySchedule($retry_schedule)
    {
        $this->container['retry_schedule'] = $retry_schedule;

        return $this;
    }

    /**
     * Gets cancel_at_period_end
     *
     * @return bool|null
     */
    public function getCancelAtPeriodEnd()
    {
        return $this->container['cancel_at_period_end'];
    }

    /**
     * Sets cancel_at_period_end
     *
     * @param bool|null $cancel_at_period_end If true, the subscription will be canceled at the end of the current period.
     *
     * @return self
     */
    public function setCancelAtPeriodEnd($cancel_at_period_end)
    {
        $this->container['cancel_at_period_end'] = $cancel_at_period_end;

        return $this;
    }

    /**
     * Gets pause_at_period_end
     *
     * @return bool|null
     */
    public function getPauseAtPeriodEnd()
    {
        return $this->container['pause_at_period_end'];
    }

    /**
     * Sets pause_at_period_end
     *
     * @param bool|null $pause_at_period_end If true, the subscription will be paused at the end of the current period.
     *
     * @return self
     */
    public function setPauseAtPeriodEnd($pause_at_period_end)
    {
        $this->container['pause_at_period_end'] = $pause_at_period_end;

        return $this;
    }

    /**
     * Gets trace_details
     *
     * @return \Monei\Model\PaymentTraceDetails|null
     */
    public function getTraceDetails()
    {
        return $this->container['trace_details'];
    }

    /**
     * Sets trace_details
     *
     * @param \Monei\Model\PaymentTraceDetails|null $trace_details trace_details
     *
     * @return self
     */
    public function setTraceDetails($trace_details)
    {
        $this->container['trace_details'] = $trace_details;

        return $this;
    }

    /**
     * Gets sequence_id
     *
     * @return string|null
     */
    public function getSequenceId()
    {
        return $this->container['sequence_id'];
    }

    /**
     * Sets sequence_id
     *
     * @param string|null $sequence_id A permanent identifier that refers to the initial payment of a sequence of payments. This value needs to be sent in the path for `RECURRING` payments.
     *
     * @return self
     */
    public function setSequenceId($sequence_id)
    {
        $this->container['sequence_id'] = $sequence_id;

        return $this;
    }

    /**
     * Gets callback_url
     *
     * @return string|null
     */
    public function getCallbackUrl()
    {
        return $this->container['callback_url'];
    }

    /**
     * Sets callback_url
     *
     * @param string|null $callback_url The URL will be called each time subscription status changes. You will receive a subscription object in the body of the request.
     *
     * @return self
     */
    public function setCallbackUrl($callback_url)
    {
        $this->container['callback_url'] = $callback_url;

        return $this;
    }

    /**
     * Gets payment_callback_url
     *
     * @return string|null
     */
    public function getPaymentCallbackUrl()
    {
        return $this->container['payment_callback_url'];
    }

    /**
     * Sets payment_callback_url
     *
     * @param string|null $payment_callback_url The URL will be called each time subscription creates a new payments. You will receive the payment object in the body of the request.
     *
     * @return self
     */
    public function setPaymentCallbackUrl($payment_callback_url)
    {
        $this->container['payment_callback_url'] = $payment_callback_url;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object|null $metadata A set of key-value pairs that you can attach to a resource. This can be useful for storing additional information about the resource in a structured format.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return int|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param int|null $created_at Time at which the resource was created. Measured in seconds since the Unix epoch.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return int|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param int|null $updated_at Time at which the resource updated last time. Measured in seconds since the Unix epoch.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


