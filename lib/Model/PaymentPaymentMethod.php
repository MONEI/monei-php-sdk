<?php

/**
 * PaymentPaymentMethod
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Monei
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
/**
 * MONEI API v1
 *
 * The MONEI API is organized around REST principles. Our API is designed to be intuitive and developer-friendly.  ### Base URL  All API requests should be made to:  ``` https://api.monei.com/v1 ```  ### Environment  MONEI provides two environments:  - **Test Environment**: For development and testing without processing real payments - **Live Environment**: For processing real transactions in production  ### Client Libraries  We provide official SDKs to simplify integration:  - [PHP SDK](https://github.com/MONEI/monei-php-sdk) - [Python SDK](https://github.com/MONEI/monei-python-sdk) - [Node.js SDK](https://github.com/MONEI/monei-node-sdk) - [Postman Collection](https://postman.monei.com/)  Our SDKs handle authentication, error handling, and request formatting automatically.  You can download the OpenAPI specification from the https://js.monei.com/api/v1/openapi.json and generate your own client library using the [OpenAPI Generator](https://openapi-generator.tech/).  ### Important Requirements  - All API requests must be made over HTTPS - If you are not using our official SDKs, you **must provide a valid `User-Agent` header** with each request - Requests without proper authentication will return a `401 Unauthorized` error  ### Error Handling  The API returns consistent error codes and messages to help you troubleshoot issues. Each response includes a `statusCode` attribute indicating the outcome of your request.  ### Rate Limits  The API implements rate limiting to ensure stability. If you exceed the limits, requests will return a `429 Too Many Requests` status code.
 *
 * The version of the OpenAPI document: 1.7.3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Monei\Model;

use ArrayAccess;
use Monei\ObjectSerializer;

/**
 * PaymentPaymentMethod Class Doc Comment
 *
 * @category Class
 * @description Details about the payment method at the time of the transaction.
 * @package  Monei
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentPaymentMethod implements \Monei\Model\ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'Payment-PaymentMethod';
    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = ['method' => 'string', 'card' => '\Monei\Model\PaymentPaymentMethodCard', 'bizum' => '\Monei\Model\PaymentPaymentMethodBizum', 'paypal' => '\Monei\Model\PaymentPaymentMethodPaypal', 'mbway' => '\Monei\Model\PaymentPaymentMethodMbway', 'trustly' => '\Monei\Model\PaymentPaymentMethodTrustly', 'sepa' => '\Monei\Model\PaymentPaymentMethodSepa', 'klarna' => '\Monei\Model\PaymentPaymentMethodKlarna'];
    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = ['method' => null, 'card' => null, 'bizum' => null, 'paypal' => null, 'mbway' => null, 'trustly' => null, 'sepa' => null, 'klarna' => null];
    /**
     * Array of nullable properties. Used for (de)serialization
     *
     * @var boolean[]
     */
    protected static array $openAPINullables = ['method' => \false, 'card' => \false, 'bizum' => \false, 'paypal' => \false, 'mbway' => \false, 'trustly' => \false, 'sepa' => \false, 'klarna' => \false];
    /**
     * If a nullable field gets set to null, insert it here
     *
     * @var boolean[]
     */
    protected array $openAPINullablesSetToNull = [];
    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }
    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }
    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }
    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }
    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }
    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? \false;
    }
    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), \true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = ['method' => 'method', 'card' => 'card', 'bizum' => 'bizum', 'paypal' => 'paypal', 'mbway' => 'mbway', 'trustly' => 'trustly', 'sepa' => 'sepa', 'klarna' => 'klarna'];
    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = ['method' => 'setMethod', 'card' => 'setCard', 'bizum' => 'setBizum', 'paypal' => 'setPaypal', 'mbway' => 'setMbway', 'trustly' => 'setTrustly', 'sepa' => 'setSepa', 'klarna' => 'setKlarna'];
    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = ['method' => 'getMethod', 'card' => 'getCard', 'bizum' => 'getBizum', 'paypal' => 'getPaypal', 'mbway' => 'getMbway', 'trustly' => 'getTrustly', 'sepa' => 'getSepa', 'klarna' => 'getKlarna'];
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }
    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }
    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }
    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }
    public const METHOD_ALIPAY = 'alipay';
    public const METHOD_CARD = 'card';
    public const METHOD_BIZUM = 'bizum';
    public const METHOD_PAYPAL = 'paypal';
    public const METHOD_MBWAY = 'mbway';
    public const METHOD_MULTIBANCO = 'multibanco';
    public const METHOD_I_DEAL = 'iDeal';
    public const METHOD_BANCONTACT = 'bancontact';
    public const METHOD_SOFORT = 'sofort';
    public const METHOD_TRUSTLY = 'trustly';
    public const METHOD_SEPA = 'sepa';
    public const METHOD_KLARNA = 'klarna';
    public const METHOD_GIROPAY = 'giropay';
    public const METHOD_EPS = 'eps';
    public const METHOD_BLIK = 'blik';
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMethodAllowableValues()
    {
        return [self::METHOD_ALIPAY, self::METHOD_CARD, self::METHOD_BIZUM, self::METHOD_PAYPAL, self::METHOD_MBWAY, self::METHOD_MULTIBANCO, self::METHOD_I_DEAL, self::METHOD_BANCONTACT, self::METHOD_SOFORT, self::METHOD_TRUSTLY, self::METHOD_SEPA, self::METHOD_KLARNA, self::METHOD_GIROPAY, self::METHOD_EPS, self::METHOD_BLIK];
    }
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];
    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('method', $data ?? [], null);
        $this->setIfExists('card', $data ?? [], null);
        $this->setIfExists('bizum', $data ?? [], null);
        $this->setIfExists('paypal', $data ?? [], null);
        $this->setIfExists('mbway', $data ?? [], null);
        $this->setIfExists('trustly', $data ?? [], null);
        $this->setIfExists('sepa', $data ?? [], null);
        $this->setIfExists('klarna', $data ?? [], null);
    }
    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array
     *
     * @param string $variableName
     * @param array  $fields
     * @param mixed  $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];
        $allowedValues = $this->getMethodAllowableValues();
        if (!is_null($this->container['method']) && !in_array($this->container['method'], $allowedValues, \true)) {
            $invalidProperties[] = sprintf("invalid value '%s' for 'method', must be one of '%s'", $this->container['method'], implode("', '", $allowedValues));
        }
        return $invalidProperties;
    }
    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }
    /**
     * Gets method
     *
     * @return string|null
     */
    public function getMethod()
    {
        return $this->container['method'];
    }
    /**
     * Sets method
     *
     * @param string|null $method Payment method type.
     *
     * @return self
     */
    public function setMethod($method)
    {
        if (is_null($method)) {
            throw new \InvalidArgumentException('non-nullable method cannot be null');
        }
        $allowedValues = $this->getMethodAllowableValues();
        if (!in_array($method, $allowedValues, \true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value '%s' for 'method', must be one of '%s'", $method, implode("', '", $allowedValues)));
        }
        $this->container['method'] = $method;
        return $this;
    }
    /**
     * Gets card
     *
     * @return \Monei\Model\PaymentPaymentMethodCard|null
     */
    public function getCard()
    {
        return $this->container['card'];
    }
    /**
     * Sets card
     *
     * @param \Monei\Model\PaymentPaymentMethodCard|null $card card
     *
     * @return self
     */
    public function setCard($card)
    {
        if (is_null($card)) {
            throw new \InvalidArgumentException('non-nullable card cannot be null');
        }
        $this->container['card'] = $card;
        return $this;
    }
    /**
     * Gets bizum
     *
     * @return \Monei\Model\PaymentPaymentMethodBizum|null
     */
    public function getBizum()
    {
        return $this->container['bizum'];
    }
    /**
     * Sets bizum
     *
     * @param \Monei\Model\PaymentPaymentMethodBizum|null $bizum bizum
     *
     * @return self
     */
    public function setBizum($bizum)
    {
        if (is_null($bizum)) {
            throw new \InvalidArgumentException('non-nullable bizum cannot be null');
        }
        $this->container['bizum'] = $bizum;
        return $this;
    }
    /**
     * Gets paypal
     *
     * @return \Monei\Model\PaymentPaymentMethodPaypal|null
     */
    public function getPaypal()
    {
        return $this->container['paypal'];
    }
    /**
     * Sets paypal
     *
     * @param \Monei\Model\PaymentPaymentMethodPaypal|null $paypal paypal
     *
     * @return self
     */
    public function setPaypal($paypal)
    {
        if (is_null($paypal)) {
            throw new \InvalidArgumentException('non-nullable paypal cannot be null');
        }
        $this->container['paypal'] = $paypal;
        return $this;
    }
    /**
     * Gets mbway
     *
     * @return \Monei\Model\PaymentPaymentMethodMbway|null
     */
    public function getMbway()
    {
        return $this->container['mbway'];
    }
    /**
     * Sets mbway
     *
     * @param \Monei\Model\PaymentPaymentMethodMbway|null $mbway mbway
     *
     * @return self
     */
    public function setMbway($mbway)
    {
        if (is_null($mbway)) {
            throw new \InvalidArgumentException('non-nullable mbway cannot be null');
        }
        $this->container['mbway'] = $mbway;
        return $this;
    }
    /**
     * Gets trustly
     *
     * @return \Monei\Model\PaymentPaymentMethodTrustly|null
     */
    public function getTrustly()
    {
        return $this->container['trustly'];
    }
    /**
     * Sets trustly
     *
     * @param \Monei\Model\PaymentPaymentMethodTrustly|null $trustly trustly
     *
     * @return self
     */
    public function setTrustly($trustly)
    {
        if (is_null($trustly)) {
            throw new \InvalidArgumentException('non-nullable trustly cannot be null');
        }
        $this->container['trustly'] = $trustly;
        return $this;
    }
    /**
     * Gets sepa
     *
     * @return \Monei\Model\PaymentPaymentMethodSepa|null
     */
    public function getSepa()
    {
        return $this->container['sepa'];
    }
    /**
     * Sets sepa
     *
     * @param \Monei\Model\PaymentPaymentMethodSepa|null $sepa sepa
     *
     * @return self
     */
    public function setSepa($sepa)
    {
        if (is_null($sepa)) {
            throw new \InvalidArgumentException('non-nullable sepa cannot be null');
        }
        $this->container['sepa'] = $sepa;
        return $this;
    }
    /**
     * Gets klarna
     *
     * @return \Monei\Model\PaymentPaymentMethodKlarna|null
     */
    public function getKlarna()
    {
        return $this->container['klarna'];
    }
    /**
     * Sets klarna
     *
     * @param \Monei\Model\PaymentPaymentMethodKlarna|null $klarna klarna
     *
     * @return self
     */
    public function setKlarna($klarna)
    {
        if (is_null($klarna)) {
            throw new \InvalidArgumentException('non-nullable klarna cannot be null');
        }
        $this->container['klarna'] = $klarna;
        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }
    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }
    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }
    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }
    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }
    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), \JSON_PRETTY_PRINT);
    }
    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
