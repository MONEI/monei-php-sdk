<?php
/**
 * PaymentMethods
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MONEI API v1
 *
 * The MONEI API is organized around REST principles. Our API is designed to be intuitive and developer-friendly.  ### Base URL  All API requests should be made to:  ``` https://api.monei.com/v1 ```  ### Environment  MONEI provides two environments:  - **Test Environment**: For development and testing without processing real payments - **Live Environment**: For processing real transactions in production  ### Client Libraries  We provide official SDKs to simplify integration:  - [PHP SDK](https://github.com/MONEI/monei-php-sdk) - [Python SDK](https://github.com/MONEI/monei-python-sdk) - [Node.js SDK](https://github.com/MONEI/monei-node-sdk) - [Postman Collection](https://postman.monei.com/)  Our SDKs handle authentication, error handling, and request formatting automatically.  You can download the OpenAPI specification from the https://js.monei.com/api/v1/openapi.json and generate your own client library using the [OpenAPI Generator](https://openapi-generator.tech/).  ### Important Requirements  - All API requests must be made over HTTPS - If you are not using our official SDKs, you **must provide a valid `User-Agent` header** with each request - Requests without proper authentication will return a `401 Unauthorized` error  ### Error Handling  The API returns consistent error codes and messages to help you troubleshoot issues. Each response includes a `statusCode` attribute indicating the outcome of your request.  ### Rate Limits  The API implements rate limiting to ensure stability. If you exceed the limits, requests will return a `429 Too Many Requests` status code.
 *
 * The version of the OpenAPI document: 1.7.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PaymentMethods Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentMethods implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentMethods';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'livemode' => 'bool',
        'payment_methods' => 'string[]',
        'metadata' => '\OpenAPI\Client\Model\PaymentMethodsMetadata',
        'merchant_name' => 'string',
        'merchant_url' => 'string',
        'country_code' => 'string',
        'account_id' => 'string',
        'amount' => 'int',
        'currency' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'livemode' => null,
        'payment_methods' => null,
        'metadata' => null,
        'merchant_name' => null,
        'merchant_url' => null,
        'country_code' => null,
        'account_id' => null,
        'amount' => null,
        'currency' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'livemode' => 'livemode',
        'payment_methods' => 'paymentMethods',
        'metadata' => 'metadata',
        'merchant_name' => 'merchantName',
        'merchant_url' => 'merchantUrl',
        'country_code' => 'countryCode',
        'account_id' => 'accountId',
        'amount' => 'amount',
        'currency' => 'currency'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'livemode' => 'setLivemode',
        'payment_methods' => 'setPaymentMethods',
        'metadata' => 'setMetadata',
        'merchant_name' => 'setMerchantName',
        'merchant_url' => 'setMerchantUrl',
        'country_code' => 'setCountryCode',
        'account_id' => 'setAccountId',
        'amount' => 'setAmount',
        'currency' => 'setCurrency'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'livemode' => 'getLivemode',
        'payment_methods' => 'getPaymentMethods',
        'metadata' => 'getMetadata',
        'merchant_name' => 'getMerchantName',
        'merchant_url' => 'getMerchantUrl',
        'country_code' => 'getCountryCode',
        'account_id' => 'getAccountId',
        'amount' => 'getAmount',
        'currency' => 'getCurrency'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PAYMENT_METHODS_ALIPAY = 'alipay';
    public const PAYMENT_METHODS_APPLE_PAY = 'applePay';
    public const PAYMENT_METHODS_BANCONTACT = 'bancontact';
    public const PAYMENT_METHODS_BIZUM = 'bizum';
    public const PAYMENT_METHODS_BLIK = 'blik';
    public const PAYMENT_METHODS_CARD = 'card';
    public const PAYMENT_METHODS_CARD_PRESENT = 'cardPresent';
    public const PAYMENT_METHODS_CLICK_TO_PAY = 'clickToPay';
    public const PAYMENT_METHODS_EPS = 'eps';
    public const PAYMENT_METHODS_GIROPAY = 'giropay';
    public const PAYMENT_METHODS_GOOGLE_PAY = 'googlePay';
    public const PAYMENT_METHODS_I_DEAL = 'iDeal';
    public const PAYMENT_METHODS_KLARNA = 'klarna';
    public const PAYMENT_METHODS_MBWAY = 'mbway';
    public const PAYMENT_METHODS_MULTIBANCO = 'multibanco';
    public const PAYMENT_METHODS_PAYPAL = 'paypal';
    public const PAYMENT_METHODS_SEPA = 'sepa';
    public const PAYMENT_METHODS_SOFORT = 'sofort';
    public const PAYMENT_METHODS_TRUSTLY = 'trustly';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentMethodsAllowableValues()
    {
        return [
            self::PAYMENT_METHODS_ALIPAY,
            self::PAYMENT_METHODS_APPLE_PAY,
            self::PAYMENT_METHODS_BANCONTACT,
            self::PAYMENT_METHODS_BIZUM,
            self::PAYMENT_METHODS_BLIK,
            self::PAYMENT_METHODS_CARD,
            self::PAYMENT_METHODS_CARD_PRESENT,
            self::PAYMENT_METHODS_CLICK_TO_PAY,
            self::PAYMENT_METHODS_EPS,
            self::PAYMENT_METHODS_GIROPAY,
            self::PAYMENT_METHODS_GOOGLE_PAY,
            self::PAYMENT_METHODS_I_DEAL,
            self::PAYMENT_METHODS_KLARNA,
            self::PAYMENT_METHODS_MBWAY,
            self::PAYMENT_METHODS_MULTIBANCO,
            self::PAYMENT_METHODS_PAYPAL,
            self::PAYMENT_METHODS_SEPA,
            self::PAYMENT_METHODS_SOFORT,
            self::PAYMENT_METHODS_TRUSTLY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['livemode'] = $data['livemode'] ?? null;
        $this->container['payment_methods'] = $data['payment_methods'] ?? null;
        $this->container['metadata'] = $data['metadata'] ?? null;
        $this->container['merchant_name'] = $data['merchant_name'] ?? null;
        $this->container['merchant_url'] = $data['merchant_url'] ?? null;
        $this->container['country_code'] = $data['country_code'] ?? null;
        $this->container['account_id'] = $data['account_id'] ?? null;
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['currency'] = $data['currency'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['livemode'] === null) {
            $invalidProperties[] = "'livemode' can't be null";
        }
        if ($this->container['payment_methods'] === null) {
            $invalidProperties[] = "'payment_methods' can't be null";
        }
        if ($this->container['metadata'] === null) {
            $invalidProperties[] = "'metadata' can't be null";
        }
        if ($this->container['merchant_name'] === null) {
            $invalidProperties[] = "'merchant_name' can't be null";
        }
        if ($this->container['merchant_url'] === null) {
            $invalidProperties[] = "'merchant_url' can't be null";
        }
        if ($this->container['country_code'] === null) {
            $invalidProperties[] = "'country_code' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets livemode
     *
     * @return bool
     */
    public function getLivemode()
    {
        return $this->container['livemode'];
    }

    /**
     * Sets livemode
     *
     * @param bool $livemode Has the value `true` if the resource exists in live mode or the value `false` if the resource exists in test mode.
     *
     * @return self
     */
    public function setLivemode($livemode)
    {
        $this->container['livemode'] = $livemode;

        return $this;
    }

    /**
     * Gets payment_methods
     *
     * @return string[]
     */
    public function getPaymentMethods()
    {
        return $this->container['payment_methods'];
    }

    /**
     * Sets payment_methods
     *
     * @param string[] $payment_methods An array of available payment methods for the account or payment. Possible values include:   - `alipay` - Alipay   - `applePay` - Apple Pay   - `bancontact` - Bancontact   - `bizum` - Bizum   - `blik` - BLIK   - `card` - Credit or debit card   - `cardPresent` - Card present (physical POS)   - `clickToPay` - Click to Pay   - `eps` - EPS   - `giropay` - Giropay   - `googlePay` - Google Pay   - `iDeal` - iDEAL   - `klarna` - Klarna   - `mbway` - MB WAY   - `multibanco` - Multibanco   - `paypal` - PayPal   - `sepa` - SEPA Direct Debit   - `sofort` - Sofort   - `trustly` - Trustly
     *
     * @return self
     */
    public function setPaymentMethods($payment_methods)
    {
        $allowedValues = $this->getPaymentMethodsAllowableValues();
        if (array_diff($payment_methods, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payment_methods', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_methods'] = $payment_methods;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return \OpenAPI\Client\Model\PaymentMethodsMetadata
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param \OpenAPI\Client\Model\PaymentMethodsMetadata $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets merchant_name
     *
     * @return string
     */
    public function getMerchantName()
    {
        return $this->container['merchant_name'];
    }

    /**
     * Sets merchant_name
     *
     * @param string $merchant_name The name of the merchant
     *
     * @return self
     */
    public function setMerchantName($merchant_name)
    {
        $this->container['merchant_name'] = $merchant_name;

        return $this;
    }

    /**
     * Gets merchant_url
     *
     * @return string
     */
    public function getMerchantUrl()
    {
        return $this->container['merchant_url'];
    }

    /**
     * Sets merchant_url
     *
     * @param string $merchant_url The URL of the merchant's website
     *
     * @return self
     */
    public function setMerchantUrl($merchant_url)
    {
        $this->container['merchant_url'] = $merchant_url;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string|null $account_id MONEI Account identifier.
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int|null $amount The amount of the payment in the smallest currency unit. For example, 10 EUR = 1000 cents. Only present when querying by paymentId.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Three-letter ISO currency code, in uppercase. Only present when querying by paymentId.
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


