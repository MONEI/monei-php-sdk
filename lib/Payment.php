<?php

/**
 * Payment
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Monei
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
/**
 * MONEI API v1
 *
 * The MONEI API is organized around REST principles. Our API is designed to be intuitive and developer-friendly.  ### Base URL  All API requests should be made to:  ``` https://api.monei.com/v1 ```  ### Environment  MONEI provides two environments:  - **Test Environment**: For development and testing without processing real payments - **Live Environment**: For processing real transactions in production  ### Client Libraries  We provide official SDKs to simplify integration:  - [PHP SDK](https://github.com/MONEI/monei-php-sdk) - [Python SDK](https://github.com/MONEI/monei-python-sdk) - [Node.js SDK](https://github.com/MONEI/monei-node-sdk) - [Postman Collection](https://postman.monei.com/)  Our SDKs handle authentication, error handling, and request formatting automatically.  You can download the OpenAPI specification from the https://js.monei.com/api/v1/openapi.json and generate your own client library using the [OpenAPI Generator](https://openapi-generator.tech/).  ### Important Requirements  - All API requests must be made over HTTPS - If you are not using our official SDKs, you **must provide a valid `User-Agent` header** with each request - Requests without proper authentication will return a `401 Unauthorized` error  ### Error Handling  The API returns consistent error codes and messages to help you troubleshoot issues. Each response includes a `statusCode` attribute indicating the outcome of your request.  ### Rate Limits  The API implements rate limiting to ensure stability. If you exceed the limits, requests will return a `429 Too Many Requests` status code.
 *
 * The version of the OpenAPI document: 1.7.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
namespace Monei\Model;

use ArrayAccess;
use Monei\ObjectSerializer;
/**
 * Payment Class Doc Comment
 *
 * @category Class
 * @package  Monei
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Payment implements \Monei\Model\ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;
    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'Payment';
    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = ['id' => 'string', 'amount' => 'int', 'currency' => 'string', 'order_id' => 'string', 'description' => 'string', 'account_id' => 'string', 'authorization_code' => 'string', 'livemode' => 'bool', 'status' => '\Monei\Model\PaymentStatus', 'status_code' => 'string', 'status_message' => 'string', 'customer' => '\Monei\Model\PaymentCustomer', 'shop' => '\Monei\Model\PaymentShop', 'billing_details' => '\Monei\Model\PaymentBillingDetails', 'shipping_details' => '\Monei\Model\PaymentShippingDetails', 'refunded_amount' => 'int', 'last_refund_amount' => 'int', 'last_refund_reason' => '\Monei\Model\PaymentLastRefundReason', 'cancellation_reason' => '\Monei\Model\PaymentCancellationReason', 'session_details' => '\Monei\Model\PaymentSessionDetails', 'trace_details' => '\Monei\Model\PaymentTraceDetails', 'payment_token' => 'string', 'payment_method' => '\Monei\Model\PaymentPaymentMethod', 'sequence' => '\Monei\Model\PaymentSequence', 'sequence_id' => 'string', 'store_id' => 'string', 'point_of_sale_id' => 'string', 'metadata' => 'object', 'next_action' => '\Monei\Model\PaymentNextAction', 'created_at' => 'int', 'updated_at' => 'int'];
    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = ['id' => null, 'amount' => 'int32', 'currency' => null, 'order_id' => null, 'description' => null, 'account_id' => null, 'authorization_code' => null, 'livemode' => null, 'status' => null, 'status_code' => null, 'status_message' => null, 'customer' => null, 'shop' => null, 'billing_details' => null, 'shipping_details' => null, 'refunded_amount' => 'int32', 'last_refund_amount' => 'int32', 'last_refund_reason' => null, 'cancellation_reason' => null, 'session_details' => null, 'trace_details' => null, 'payment_token' => null, 'payment_method' => null, 'sequence' => null, 'sequence_id' => null, 'store_id' => null, 'point_of_sale_id' => null, 'metadata' => null, 'next_action' => null, 'created_at' => 'int64', 'updated_at' => 'int64'];
    /**
     * Array of nullable properties. Used for (de)serialization
     *
     * @var boolean[]
     */
    protected static array $openAPINullables = ['id' => \false, 'amount' => \false, 'currency' => \false, 'order_id' => \false, 'description' => \false, 'account_id' => \false, 'authorization_code' => \false, 'livemode' => \false, 'status' => \false, 'status_code' => \false, 'status_message' => \false, 'customer' => \false, 'shop' => \false, 'billing_details' => \false, 'shipping_details' => \false, 'refunded_amount' => \false, 'last_refund_amount' => \false, 'last_refund_reason' => \false, 'cancellation_reason' => \false, 'session_details' => \false, 'trace_details' => \false, 'payment_token' => \false, 'payment_method' => \false, 'sequence' => \false, 'sequence_id' => \false, 'store_id' => \false, 'point_of_sale_id' => \false, 'metadata' => \false, 'next_action' => \false, 'created_at' => \false, 'updated_at' => \false];
    /**
     * If a nullable field gets set to null, insert it here
     *
     * @var boolean[]
     */
    protected array $openAPINullablesSetToNull = [];
    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }
    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }
    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }
    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }
    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }
    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? \false;
    }
    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), \true);
    }
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = ['id' => 'id', 'amount' => 'amount', 'currency' => 'currency', 'order_id' => 'orderId', 'description' => 'description', 'account_id' => 'accountId', 'authorization_code' => 'authorizationCode', 'livemode' => 'livemode', 'status' => 'status', 'status_code' => 'statusCode', 'status_message' => 'statusMessage', 'customer' => 'customer', 'shop' => 'shop', 'billing_details' => 'billingDetails', 'shipping_details' => 'shippingDetails', 'refunded_amount' => 'refundedAmount', 'last_refund_amount' => 'lastRefundAmount', 'last_refund_reason' => 'lastRefundReason', 'cancellation_reason' => 'cancellationReason', 'session_details' => 'sessionDetails', 'trace_details' => 'traceDetails', 'payment_token' => 'paymentToken', 'payment_method' => 'paymentMethod', 'sequence' => 'sequence', 'sequence_id' => 'sequenceId', 'store_id' => 'storeId', 'point_of_sale_id' => 'pointOfSaleId', 'metadata' => 'metadata', 'next_action' => 'nextAction', 'created_at' => 'createdAt', 'updated_at' => 'updatedAt'];
    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = ['id' => 'setId', 'amount' => 'setAmount', 'currency' => 'setCurrency', 'order_id' => 'setOrderId', 'description' => 'setDescription', 'account_id' => 'setAccountId', 'authorization_code' => 'setAuthorizationCode', 'livemode' => 'setLivemode', 'status' => 'setStatus', 'status_code' => 'setStatusCode', 'status_message' => 'setStatusMessage', 'customer' => 'setCustomer', 'shop' => 'setShop', 'billing_details' => 'setBillingDetails', 'shipping_details' => 'setShippingDetails', 'refunded_amount' => 'setRefundedAmount', 'last_refund_amount' => 'setLastRefundAmount', 'last_refund_reason' => 'setLastRefundReason', 'cancellation_reason' => 'setCancellationReason', 'session_details' => 'setSessionDetails', 'trace_details' => 'setTraceDetails', 'payment_token' => 'setPaymentToken', 'payment_method' => 'setPaymentMethod', 'sequence' => 'setSequence', 'sequence_id' => 'setSequenceId', 'store_id' => 'setStoreId', 'point_of_sale_id' => 'setPointOfSaleId', 'metadata' => 'setMetadata', 'next_action' => 'setNextAction', 'created_at' => 'setCreatedAt', 'updated_at' => 'setUpdatedAt'];
    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = ['id' => 'getId', 'amount' => 'getAmount', 'currency' => 'getCurrency', 'order_id' => 'getOrderId', 'description' => 'getDescription', 'account_id' => 'getAccountId', 'authorization_code' => 'getAuthorizationCode', 'livemode' => 'getLivemode', 'status' => 'getStatus', 'status_code' => 'getStatusCode', 'status_message' => 'getStatusMessage', 'customer' => 'getCustomer', 'shop' => 'getShop', 'billing_details' => 'getBillingDetails', 'shipping_details' => 'getShippingDetails', 'refunded_amount' => 'getRefundedAmount', 'last_refund_amount' => 'getLastRefundAmount', 'last_refund_reason' => 'getLastRefundReason', 'cancellation_reason' => 'getCancellationReason', 'session_details' => 'getSessionDetails', 'trace_details' => 'getTraceDetails', 'payment_token' => 'getPaymentToken', 'payment_method' => 'getPaymentMethod', 'sequence' => 'getSequence', 'sequence_id' => 'getSequenceId', 'store_id' => 'getStoreId', 'point_of_sale_id' => 'getPointOfSaleId', 'metadata' => 'getMetadata', 'next_action' => 'getNextAction', 'created_at' => 'getCreatedAt', 'updated_at' => 'getUpdatedAt'];
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }
    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }
    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }
    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];
    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('authorization_code', $data ?? [], null);
        $this->setIfExists('livemode', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('status_code', $data ?? [], null);
        $this->setIfExists('status_message', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('shop', $data ?? [], null);
        $this->setIfExists('billing_details', $data ?? [], null);
        $this->setIfExists('shipping_details', $data ?? [], null);
        $this->setIfExists('refunded_amount', $data ?? [], null);
        $this->setIfExists('last_refund_amount', $data ?? [], null);
        $this->setIfExists('last_refund_reason', $data ?? [], null);
        $this->setIfExists('cancellation_reason', $data ?? [], null);
        $this->setIfExists('session_details', $data ?? [], null);
        $this->setIfExists('trace_details', $data ?? [], null);
        $this->setIfExists('payment_token', $data ?? [], null);
        $this->setIfExists('payment_method', $data ?? [], null);
        $this->setIfExists('sequence', $data ?? [], null);
        $this->setIfExists('sequence_id', $data ?? [], null);
        $this->setIfExists('store_id', $data ?? [], null);
        $this->setIfExists('point_of_sale_id', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('next_action', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
    }
    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array
     *
     * @param string $variableName
     * @param array  $fields
     * @param mixed  $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }
        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['account_id'] === null) {
            $invalidProperties[] = "'account_id' can't be null";
        }
        if ($this->container['livemode'] === null) {
            $invalidProperties[] = "'livemode' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        return $invalidProperties;
    }
    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }
    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }
    /**
     * Sets id
     *
     * @param string $id Unique identifier for the payment.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;
        return $this;
    }
    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }
    /**
     * Sets amount
     *
     * @param int $amount Amount intended to be collected by this payment. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge 1.00 USD).
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;
        return $this;
    }
    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }
    /**
     * Sets currency
     *
     * @param string $currency Three-letter [ISO currency code](https://en.wikipedia.org/wiki/ISO_4217), in uppercase. Must be a supported currency.
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;
        return $this;
    }
    /**
     * Gets order_id
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }
    /**
     * Sets order_id
     *
     * @param string|null $order_id An order ID from your system. A unique identifier that can be used to reconcile the payment with your internal system.
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (is_null($order_id)) {
            throw new \InvalidArgumentException('non-nullable order_id cannot be null');
        }
        $this->container['order_id'] = $order_id;
        return $this;
    }
    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }
    /**
     * Sets description
     *
     * @param string|null $description An arbitrary string attached to the payment. Often useful for displaying to users.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;
        return $this;
    }
    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }
    /**
     * Sets account_id
     *
     * @param string $account_id MONEI Account identifier.
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (is_null($account_id)) {
            throw new \InvalidArgumentException('non-nullable account_id cannot be null');
        }
        $this->container['account_id'] = $account_id;
        return $this;
    }
    /**
     * Gets authorization_code
     *
     * @return string|null
     */
    public function getAuthorizationCode()
    {
        return $this->container['authorization_code'];
    }
    /**
     * Sets authorization_code
     *
     * @param string|null $authorization_code Unique identifier provided by the bank performing transaction.
     *
     * @return self
     */
    public function setAuthorizationCode($authorization_code)
    {
        if (is_null($authorization_code)) {
            throw new \InvalidArgumentException('non-nullable authorization_code cannot be null');
        }
        $this->container['authorization_code'] = $authorization_code;
        return $this;
    }
    /**
     * Gets livemode
     *
     * @return bool
     */
    public function getLivemode()
    {
        return $this->container['livemode'];
    }
    /**
     * Sets livemode
     *
     * @param bool $livemode Has the value `true` if the resource exists in live mode or the value `false` if the resource exists in test mode.
     *
     * @return self
     */
    public function setLivemode($livemode)
    {
        if (is_null($livemode)) {
            throw new \InvalidArgumentException('non-nullable livemode cannot be null');
        }
        $this->container['livemode'] = $livemode;
        return $this;
    }
    /**
     * Gets status
     *
     * @return \Monei\Model\PaymentStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }
    /**
     * Sets status
     *
     * @param \Monei\Model\PaymentStatus $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;
        return $this;
    }
    /**
     * Gets status_code
     *
     * @return string|null
     */
    public function getStatusCode()
    {
        return $this->container['status_code'];
    }
    /**
     * Sets status_code
     *
     * @param string|null $status_code Payment status code.
     *
     * @return self
     */
    public function setStatusCode($status_code)
    {
        if (is_null($status_code)) {
            throw new \InvalidArgumentException('non-nullable status_code cannot be null');
        }
        $this->container['status_code'] = $status_code;
        return $this;
    }
    /**
     * Gets status_message
     *
     * @return string|null
     */
    public function getStatusMessage()
    {
        return $this->container['status_message'];
    }
    /**
     * Sets status_message
     *
     * @param string|null $status_message Human readable status message, can be displayed to a user.
     *
     * @return self
     */
    public function setStatusMessage($status_message)
    {
        if (is_null($status_message)) {
            throw new \InvalidArgumentException('non-nullable status_message cannot be null');
        }
        $this->container['status_message'] = $status_message;
        return $this;
    }
    /**
     * Gets customer
     *
     * @return \Monei\Model\PaymentCustomer|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }
    /**
     * Sets customer
     *
     * @param \Monei\Model\PaymentCustomer|null $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }
        $this->container['customer'] = $customer;
        return $this;
    }
    /**
     * Gets shop
     *
     * @return \Monei\Model\PaymentShop|null
     */
    public function getShop()
    {
        return $this->container['shop'];
    }
    /**
     * Sets shop
     *
     * @param \Monei\Model\PaymentShop|null $shop shop
     *
     * @return self
     */
    public function setShop($shop)
    {
        if (is_null($shop)) {
            throw new \InvalidArgumentException('non-nullable shop cannot be null');
        }
        $this->container['shop'] = $shop;
        return $this;
    }
    /**
     * Gets billing_details
     *
     * @return \Monei\Model\PaymentBillingDetails|null
     */
    public function getBillingDetails()
    {
        return $this->container['billing_details'];
    }
    /**
     * Sets billing_details
     *
     * @param \Monei\Model\PaymentBillingDetails|null $billing_details billing_details
     *
     * @return self
     */
    public function setBillingDetails($billing_details)
    {
        if (is_null($billing_details)) {
            throw new \InvalidArgumentException('non-nullable billing_details cannot be null');
        }
        $this->container['billing_details'] = $billing_details;
        return $this;
    }
    /**
     * Gets shipping_details
     *
     * @return \Monei\Model\PaymentShippingDetails|null
     */
    public function getShippingDetails()
    {
        return $this->container['shipping_details'];
    }
    /**
     * Sets shipping_details
     *
     * @param \Monei\Model\PaymentShippingDetails|null $shipping_details shipping_details
     *
     * @return self
     */
    public function setShippingDetails($shipping_details)
    {
        if (is_null($shipping_details)) {
            throw new \InvalidArgumentException('non-nullable shipping_details cannot be null');
        }
        $this->container['shipping_details'] = $shipping_details;
        return $this;
    }
    /**
     * Gets refunded_amount
     *
     * @return int|null
     */
    public function getRefundedAmount()
    {
        return $this->container['refunded_amount'];
    }
    /**
     * Sets refunded_amount
     *
     * @param int|null $refunded_amount Amount in cents refunded (can be less than the amount attribute on the payment if a partial refund was issued).
     *
     * @return self
     */
    public function setRefundedAmount($refunded_amount)
    {
        if (is_null($refunded_amount)) {
            throw new \InvalidArgumentException('non-nullable refunded_amount cannot be null');
        }
        $this->container['refunded_amount'] = $refunded_amount;
        return $this;
    }
    /**
     * Gets last_refund_amount
     *
     * @return int|null
     */
    public function getLastRefundAmount()
    {
        return $this->container['last_refund_amount'];
    }
    /**
     * Sets last_refund_amount
     *
     * @param int|null $last_refund_amount Amount in cents refunded in the last transaction.
     *
     * @return self
     */
    public function setLastRefundAmount($last_refund_amount)
    {
        if (is_null($last_refund_amount)) {
            throw new \InvalidArgumentException('non-nullable last_refund_amount cannot be null');
        }
        $this->container['last_refund_amount'] = $last_refund_amount;
        return $this;
    }
    /**
     * Gets last_refund_reason
     *
     * @return \Monei\Model\PaymentLastRefundReason|null
     */
    public function getLastRefundReason()
    {
        return $this->container['last_refund_reason'];
    }
    /**
     * Sets last_refund_reason
     *
     * @param \Monei\Model\PaymentLastRefundReason|null $last_refund_reason last_refund_reason
     *
     * @return self
     */
    public function setLastRefundReason($last_refund_reason)
    {
        if (is_null($last_refund_reason)) {
            throw new \InvalidArgumentException('non-nullable last_refund_reason cannot be null');
        }
        $this->container['last_refund_reason'] = $last_refund_reason;
        return $this;
    }
    /**
     * Gets cancellation_reason
     *
     * @return \Monei\Model\PaymentCancellationReason|null
     */
    public function getCancellationReason()
    {
        return $this->container['cancellation_reason'];
    }
    /**
     * Sets cancellation_reason
     *
     * @param \Monei\Model\PaymentCancellationReason|null $cancellation_reason cancellation_reason
     *
     * @return self
     */
    public function setCancellationReason($cancellation_reason)
    {
        if (is_null($cancellation_reason)) {
            throw new \InvalidArgumentException('non-nullable cancellation_reason cannot be null');
        }
        $this->container['cancellation_reason'] = $cancellation_reason;
        return $this;
    }
    /**
     * Gets session_details
     *
     * @return \Monei\Model\PaymentSessionDetails|null
     */
    public function getSessionDetails()
    {
        return $this->container['session_details'];
    }
    /**
     * Sets session_details
     *
     * @param \Monei\Model\PaymentSessionDetails|null $session_details session_details
     *
     * @return self
     */
    public function setSessionDetails($session_details)
    {
        if (is_null($session_details)) {
            throw new \InvalidArgumentException('non-nullable session_details cannot be null');
        }
        $this->container['session_details'] = $session_details;
        return $this;
    }
    /**
     * Gets trace_details
     *
     * @return \Monei\Model\PaymentTraceDetails|null
     */
    public function getTraceDetails()
    {
        return $this->container['trace_details'];
    }
    /**
     * Sets trace_details
     *
     * @param \Monei\Model\PaymentTraceDetails|null $trace_details trace_details
     *
     * @return self
     */
    public function setTraceDetails($trace_details)
    {
        if (is_null($trace_details)) {
            throw new \InvalidArgumentException('non-nullable trace_details cannot be null');
        }
        $this->container['trace_details'] = $trace_details;
        return $this;
    }
    /**
     * Gets payment_token
     *
     * @return string|null
     */
    public function getPaymentToken()
    {
        return $this->container['payment_token'];
    }
    /**
     * Sets payment_token
     *
     * @param string|null $payment_token A permanent token represents a payment method used in the payment. Pass `generatePaymentToken: true` when you creating a payment to generate it. You can pass it as `paymentToken` parameter to create other payments with the same payment method. This token does not expire, and should only be used server-side.
     *
     * @return self
     */
    public function setPaymentToken($payment_token)
    {
        if (is_null($payment_token)) {
            throw new \InvalidArgumentException('non-nullable payment_token cannot be null');
        }
        $this->container['payment_token'] = $payment_token;
        return $this;
    }
    /**
     * Gets payment_method
     *
     * @return \Monei\Model\PaymentPaymentMethod|null
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }
    /**
     * Sets payment_method
     *
     * @param \Monei\Model\PaymentPaymentMethod|null $payment_method payment_method
     *
     * @return self
     */
    public function setPaymentMethod($payment_method)
    {
        if (is_null($payment_method)) {
            throw new \InvalidArgumentException('non-nullable payment_method cannot be null');
        }
        $this->container['payment_method'] = $payment_method;
        return $this;
    }
    /**
     * Gets sequence
     *
     * @return \Monei\Model\PaymentSequence|null
     */
    public function getSequence()
    {
        return $this->container['sequence'];
    }
    /**
     * Sets sequence
     *
     * @param \Monei\Model\PaymentSequence|null $sequence sequence
     *
     * @return self
     */
    public function setSequence($sequence)
    {
        if (is_null($sequence)) {
            throw new \InvalidArgumentException('non-nullable sequence cannot be null');
        }
        $this->container['sequence'] = $sequence;
        return $this;
    }
    /**
     * Gets sequence_id
     *
     * @return string|null
     */
    public function getSequenceId()
    {
        return $this->container['sequence_id'];
    }
    /**
     * Sets sequence_id
     *
     * @param string|null $sequence_id A permanent identifier that refers to the initial payment of a sequence of payments. This value needs to be sent in the path for `RECURRING` payments.
     *
     * @return self
     */
    public function setSequenceId($sequence_id)
    {
        if (is_null($sequence_id)) {
            throw new \InvalidArgumentException('non-nullable sequence_id cannot be null');
        }
        $this->container['sequence_id'] = $sequence_id;
        return $this;
    }
    /**
     * Gets store_id
     *
     * @return string|null
     */
    public function getStoreId()
    {
        return $this->container['store_id'];
    }
    /**
     * Sets store_id
     *
     * @param string|null $store_id A unique identifier of the Store. If specified the payment is attached to this Store.
     *
     * @return self
     */
    public function setStoreId($store_id)
    {
        if (is_null($store_id)) {
            throw new \InvalidArgumentException('non-nullable store_id cannot be null');
        }
        $this->container['store_id'] = $store_id;
        return $this;
    }
    /**
     * Gets point_of_sale_id
     *
     * @return string|null
     */
    public function getPointOfSaleId()
    {
        return $this->container['point_of_sale_id'];
    }
    /**
     * Sets point_of_sale_id
     *
     * @param string|null $point_of_sale_id A unique identifier of the Point of Sale. If specified the payment is attached to this Point of Sale. If there is a QR code attached to the same Point of Sale, this payment will be available by scanning the QR code.
     *
     * @return self
     */
    public function setPointOfSaleId($point_of_sale_id)
    {
        if (is_null($point_of_sale_id)) {
            throw new \InvalidArgumentException('non-nullable point_of_sale_id cannot be null');
        }
        $this->container['point_of_sale_id'] = $point_of_sale_id;
        return $this;
    }
    /**
     * Gets metadata
     *
     * @return object|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }
    /**
     * Sets metadata
     *
     * @param object|null $metadata A set of key-value pairs that you can attach to a resource. This can be useful for storing additional information about the resource in a structured format.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;
        return $this;
    }
    /**
     * Gets next_action
     *
     * @return \Monei\Model\PaymentNextAction|null
     */
    public function getNextAction()
    {
        return $this->container['next_action'];
    }
    /**
     * Sets next_action
     *
     * @param \Monei\Model\PaymentNextAction|null $next_action next_action
     *
     * @return self
     */
    public function setNextAction($next_action)
    {
        if (is_null($next_action)) {
            throw new \InvalidArgumentException('non-nullable next_action cannot be null');
        }
        $this->container['next_action'] = $next_action;
        return $this;
    }
    /**
     * Gets created_at
     *
     * @return int|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }
    /**
     * Sets created_at
     *
     * @param int|null $created_at Time at which the resource was created. Measured in seconds since the Unix epoch.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;
        return $this;
    }
    /**
     * Gets updated_at
     *
     * @return int|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }
    /**
     * Sets updated_at
     *
     * @param int|null $updated_at Time at which the resource updated last time. Measured in seconds since the Unix epoch.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;
        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }
    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }
    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }
    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }
    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }
    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), \JSON_PRETTY_PRINT);
    }
    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
