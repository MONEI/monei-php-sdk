<?php

/**
 * ApplePayDomainApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Monei
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
/**
 * MONEI API v1
 *
 * The MONEI API is organized around REST principles. Our API is designed to be intuitive and developer-friendly.  ### Base URL  All API requests should be made to:  ``` https://api.monei.com/v1 ```  ### Environment  MONEI provides two environments:  - **Test Environment**: For development and testing without processing real payments - **Live Environment**: For processing real transactions in production  ### Client Libraries  We provide official SDKs to simplify integration:  - [PHP SDK](https://github.com/MONEI/monei-php-sdk) - [Python SDK](https://github.com/MONEI/monei-python-sdk) - [Node.js SDK](https://github.com/MONEI/monei-node-sdk) - [Postman Collection](https://postman.monei.com/)  Our SDKs handle authentication, error handling, and request formatting automatically.  You can download the OpenAPI specification from the https://js.monei.com/api/v1/openapi.json and generate your own client library using the [OpenAPI Generator](https://openapi-generator.tech/).  ### Important Requirements  - All API requests must be made over HTTPS - If you are not using our official SDKs, you **must provide a valid `User-Agent` header** with each request - Requests without proper authentication will return a `401 Unauthorized` error  ### Error Handling  The API returns consistent error codes and messages to help you troubleshoot issues. Each response includes a `statusCode` attribute indicating the outcome of your request.  ### Rate Limits  The API implements rate limiting to ensure stability. If you exceed the limits, requests will return a `429 Too Many Requests` status code.
 *
 * The version of the OpenAPI document: 1.7.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
namespace Monei\Api;

use Monei\Internal\GuzzleHttp\Client;
use Monei\Internal\GuzzleHttp\ClientInterface;
use Monei\Internal\GuzzleHttp\Exception\ConnectException;
use Monei\Internal\GuzzleHttp\Exception\RequestException;
use Monei\Internal\GuzzleHttp\Psr7\MultipartStream;
use Monei\Internal\GuzzleHttp\Psr7\Request;
use Monei\Internal\GuzzleHttp\RequestOptions;
use Monei\Internal\Psr\Http\Message\RequestInterface;
use Monei\Internal\Psr\Http\Message\ResponseInterface;
use Monei\ApiException;
use Monei\Configuration;
use Monei\FormDataProcessor;
use Monei\HeaderSelector;
use Monei\ObjectSerializer;
/**
 * ApplePayDomainApi Class Doc Comment
 *
 * @category Class
 * @package  Monei
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ApplePayDomainApi
{
    /**
     * @var ClientInterface
     */
    protected $client;
    /**
     * @var Configuration
     */
    protected $config;
    /**
     * @var HeaderSelector
     */
    protected $headerSelector;
    /**
     * @var int Host index
     */
    protected $hostIndex;
    /** @var string[] $contentTypes **/
    public const contentTypes = ['register' => ['application/json']];
    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(?ClientInterface $client = null, ?Configuration $config = null, ?HeaderSelector $selector = null, int $hostIndex = 0)
    {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }
    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }
    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }
    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }
    /**
     * Operation register
     *
     * Register Domain
     *
     * @param  \Monei\Model\RegisterApplePayDomainRequest $register_apple_pay_domain_request register_apple_pay_domain_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['register'] to see the possible values for this operation
     *
     * @throws \Monei\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Monei\Model\InlineObject|\Monei\Model\BadRequestError|\Monei\Model\UnauthorizedError|\Monei\Model\NotFoundError|\Monei\Model\UnprocessableEntityError|\Monei\Model\InternalServerError|\Monei\Model\ServiceUnavailableError
     */
    public function register($register_apple_pay_domain_request, string $contentType = self::contentTypes['register'][0])
    {
        list($response) = $this->registerWithHttpInfo($register_apple_pay_domain_request, $contentType);
        return $response;
    }
    /**
     * Operation registerWithHttpInfo
     *
     * Register Domain
     *
     * @param  \Monei\Model\RegisterApplePayDomainRequest $register_apple_pay_domain_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['register'] to see the possible values for this operation
     *
     * @throws \Monei\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Monei\Model\InlineObject|\Monei\Model\BadRequestError|\Monei\Model\UnauthorizedError|\Monei\Model\NotFoundError|\Monei\Model\UnprocessableEntityError|\Monei\Model\InternalServerError|\Monei\Model\ServiceUnavailableError, HTTP status code, HTTP response headers (array of strings)
     */
    public function registerWithHttpInfo($register_apple_pay_domain_request, string $contentType = self::contentTypes['register'][0])
    {
        $request = $this->registerRequest($register_apple_pay_domain_request, $contentType);
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            } catch (ConnectException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), null, null);
            }
            $statusCode = $response->getStatusCode();
            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType('\Monei\Model\InlineObject', $request, $response);
                case 400:
                    return $this->handleResponseWithDataType('\Monei\Model\BadRequestError', $request, $response);
                case 401:
                    return $this->handleResponseWithDataType('\Monei\Model\UnauthorizedError', $request, $response);
                case 404:
                    return $this->handleResponseWithDataType('\Monei\Model\NotFoundError', $request, $response);
                case 422:
                    return $this->handleResponseWithDataType('\Monei\Model\UnprocessableEntityError', $request, $response);
                case 500:
                    return $this->handleResponseWithDataType('\Monei\Model\InternalServerError', $request, $response);
                case 503:
                    return $this->handleResponseWithDataType('\Monei\Model\ServiceUnavailableError', $request, $response);
            }
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }
            return $this->handleResponseWithDataType('\Monei\Model\InlineObject', $request, $response);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Monei\Model\InlineObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Monei\Model\BadRequestError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Monei\Model\UnauthorizedError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Monei\Model\NotFoundError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Monei\Model\UnprocessableEntityError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Monei\Model\InternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Monei\Model\ServiceUnavailableError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    throw $e;
            }
            throw $e;
        }
    }
    /**
     * Operation registerAsync
     *
     * Register Domain
     *
     * @param  \Monei\Model\RegisterApplePayDomainRequest $register_apple_pay_domain_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['register'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function registerAsync($register_apple_pay_domain_request, string $contentType = self::contentTypes['register'][0])
    {
        return $this->registerAsyncWithHttpInfo($register_apple_pay_domain_request, $contentType)->then(function ($response) {
            return $response[0];
        });
    }
    /**
     * Operation registerAsyncWithHttpInfo
     *
     * Register Domain
     *
     * @param  \Monei\Model\RegisterApplePayDomainRequest $register_apple_pay_domain_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['register'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function registerAsyncWithHttpInfo($register_apple_pay_domain_request, string $contentType = self::contentTypes['register'][0])
    {
        $returnType = '\Monei\Model\InlineObject';
        $request = $this->registerRequest($register_apple_pay_domain_request, $contentType);
        return $this->client->sendAsync($request, $this->createHttpClientOption())->then(function ($response) use ($returnType) {
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody();
                //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }
            return [ObjectSerializer::deserialize($content, $returnType, []), $response->getStatusCode(), $response->getHeaders()];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
        });
    }
    /**
     * Create request for operation 'register'
     *
     * @param  \Monei\Model\RegisterApplePayDomainRequest $register_apple_pay_domain_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['register'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function registerRequest($register_apple_pay_domain_request, string $contentType = self::contentTypes['register'][0])
    {
        // verify the required parameter 'register_apple_pay_domain_request' is set
        if ($register_apple_pay_domain_request === null || is_array($register_apple_pay_domain_request) && count($register_apple_pay_domain_request) === 0) {
            throw new \InvalidArgumentException('Missing the required parameter $register_apple_pay_domain_request when calling register');
        }
        $resourcePath = '/apple-pay/domains';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = \false;
        $headers = $this->headerSelector->selectHeaders(['application/json'], $contentType, $multipart);
        // for model (json/xml)
        if (isset($register_apple_pay_domain_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== \false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \Monei\Internal\GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($register_apple_pay_domain_request));
            } else {
                $httpBody = $register_apple_pay_domain_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = ['name' => $formParamName, 'contents' => $formParamValueItem];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== \false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \Monei\Internal\GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge($defaultHeaders, $headerParams, $headers);
        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request('POST', $operationHost . $resourcePath . ($query ? "?{$query}" : ''), $headers, $httpBody);
    }
    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }
        return $options;
    }
    private function handleResponseWithDataType(string $dataType, RequestInterface $request, ResponseInterface $response): array
    {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody();
            //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, \false, 512, \JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(sprintf('Error JSON decoding server response (%s)', $request->getUri()), $response->getStatusCode(), $response->getHeaders(), $content);
                }
            }
        }
        return [ObjectSerializer::deserialize($content, $dataType, []), $response->getStatusCode(), $response->getHeaders()];
    }
    private function responseWithinRangeCode(string $rangeCode, int $statusCode): bool
    {
        $left = (int) ($rangeCode[0] . '00');
        $right = (int) ($rangeCode[0] . '99');
        return $statusCode >= $left && $statusCode <= $right;
    }
}
